# -*- coding: utf-8 -*-
"""codealpha_task_twitter_sentiment_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LZS672uGtg-czqkkoVeR5aBjVG_vmQT-
"""

# installing kaggle library
! pip install kaggle

"""**Upload your Kaggle.json file**"""

#configuring the path of kaggle.json file
!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/
!chmod 600 ~/.kaggle/kaggle.json

"""Import Twitter Sentiment dataset"""

#API to fetch data from kaggle
!kaggle datasets download -d kazanova/sentiment140

#etract the compressed dataset

from zipfile import ZipFile
dataset='/content/sentiment140.zip'

with ZipFile(dataset,'r') as zip:
  zip.extractall()
  print('The dataset is extracted')

"""**Import the dependencies**"""

import pandas as pd
import numpy as np
import re
from nltk.corpus import stopwords
from nltk.stem.porter import PorterStemmer
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score

import nltk
nltk.download('stopwords')

#printing the stopwords in English
print(stopwords.words('english'))

"""**Data Processing**"""

# loading the data from csv file to pandas dataframe
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv',encoding="ISO-8859-1")

#Checking the number pf rows and columns
twitter_data.shape

twitter_data.head(2)

#naming the columns and reading the dataset again

column_names=['target','id','date','flag','user','text']
twitter_data=pd.read_csv('/content/training.1600000.processed.noemoticon.csv', names=column_names, encoding="ISO-8859-1")

twitter_data.shape

twitter_data.head(5)

#counting the number of missing values in the datset
twitter_data.isnull().sum()

#checking the distribution of target
twitter_data['target'].value_counts()

"""convert the target "4" to "1"
"""

twitter_data.replace({'target':{4:1}},inplace=True)

twitter_data['target'].value_counts()

"""0---->Negative Tweeet

1---->Positive Tweet

*Stemming*
"""

port_stem=PorterStemmer()

def stemming(content):

  stemmed_content=re.sub('[^a-zA-Z]',' ',content)
  stemmed_content=stemmed_content.lower()
  stemmed_content=stemmed_content.split()
  stemmed_content=[port_stem.stem(word) for word in stemmed_content if not word in stopwords.words('english')]
  return stemmed_content

twitter_data['stemmed_content']=twitter_data['text'].apply(stemming)

twitter_data.head()

print(twitter_data['stemmed_content'])

print(twitter_data['target'])

# Separating the data and label
X = twitter_data['stemmed_content'].apply(lambda words: " ".join(words)).values
Y = twitter_data['target'].values

# Check the output
print(X[:5])
print(Y[:5])

x_train,x_test,y_train,y_test=train_test_split(X,Y,test_size=0.2,stratify=y,random_state=2)

print(x.shape,x_train.shape,x_test.shape)

print(x_train)

print(x_test)

#converting textual data to numerical data

vectorizer=TfidfVectorizer()

x_train=vectorizer.fit_transform(x_train)
x_test=vectorizer.transform(x_test)

print(x_train)

print(x_test)

"""Training the Machine Learning Model

Logistic Regression
"""

model=LogisticRegression(max_iter=1000)

model.fit(x_train,y_train)

"""MODEL EVALUATION

ACCURACY SCORE
"""

x_train_prediction=model.predict(x_train)
training_data_accuracy=accuracy_score(x_train_prediction,y_train)

print('Accuracy score of train data :',training_data_accuracy)

x_test_prediction=model.predict(x_test)
test_data_accuracy=accuracy_score(x_test_prediction,y_test)

print('Accuracy score of test data :',test_data_accuracy)

"""model accuracy=77.6%

saving trained model
"""

import pickle

filename='trained_model.sav'
pickle.dump(model,open(filename,'wb'))

"""using the saved model for future predictions"""

#loading the saved model
loaded_model=pickle.load(open('/content/trained_model.sav','rb'))

x_new=x_test[200]
print(y_test[200])

prediction=model.predict(x_new)
print(prediction)

if(prediction[0]==0):
  print('negative tweet')

else:
  print('positive tweet')

